import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { PairingsTable } from "../components/PairingsTable";
import { ResultsForm } from "../components/ResultsForm";
import { useTournament } from "../hooks/useTournament";
import { generatePairings, updateResults } from "../tournament";
import React from "react";

export const TournamentPage = () => {
  const { 
    currentTournament: tournament, 
    setCurrentTournament: setTournament,
    saveTournamentToHistory
  } = useTournament();
  const [isPairingsGenerated, setIsPairingsGenerated] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  if (!tournament) {
    return (
      <div className="container">
        <div className="tournament-status">
          <h3>–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</h3>
          <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä</p>
          <button 
            onClick={() => navigate('/setup')} 
            className="btn-primary"
            style={{ marginTop: '1rem' }}
          >
            üõ†Ô∏è –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
          </button>
        </div>
      </div>
    );
  }

  const handleStartTournament = () => {
    const newPairings = generatePairings(tournament);
    setTournament({
      ...tournament,
      pairings: newPairings,
      isStarted: true,
      currentRound: 1
    });
    setIsPairingsGenerated(true);
  };

  const handleGeneratePairings = () => {
    const newPairings = generatePairings(tournament);
    setTournament({
      ...tournament,
      pairings: newPairings,
    });
    setIsPairingsGenerated(true);
  };

  const handleResultsSubmit = async (results: { pairingIndex: number; result: number }[]) => {
    setIsLoading(true);
    try {
      const updatedTournament = updateResults(tournament, tournament.currentRound, results);
      if (updatedTournament.currentRound > updatedTournament.totalRounds) {
        updatedTournament.isFinished = true;
        updatedTournament.currentRound = updatedTournament.totalRounds;
      }
      setTournament(updatedTournament);
      setIsPairingsGenerated(false);
      
      if (updatedTournament.isFinished) {
        saveTournamentToHistory(updatedTournament);
        navigate("/results");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleNewTournament = () => {
    if (confirm("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä? –¢–µ–∫—É—â–∏–π —Ç—É—Ä–Ω–∏—Ä –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏.")) {
      navigate("/setup");
    }
  };

  return (
    <div className="container">
      <header>
        <h1>
          <span className="emoji">üèÜ</span> {tournament.name}
        </h1>
        <div className="tournament-info">
          <span>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {new Date(tournament.createdAt).toLocaleDateString()}</span>
          <span>üåÄ –¢—É—Ä: {tournament.currentRound} –∏–∑ {tournament.totalRounds}</span>
          <span>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {tournament.players.length}</span>
        </div>
      </header>
      
      <div className="actions" style={{ margin: '1rem 0' }}>
        <button 
          onClick={() => navigate('/results')} 
          className="btn-secondary"
        >
          üìä –¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        </button>
        <button 
          onClick={handleNewTournament}
          className="btn-secondary"
        >
          üÜï –ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
        </button>
      </div>
      
      {!tournament.isStarted ? (
        <div className="tournament-status">
          <h3>–¢—É—Ä–Ω–∏—Ä –≥–æ—Ç–æ–≤ –∫ –Ω–∞—á–∞–ª—É</h3>
          <p>–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä</p>
          <button 
            onClick={handleStartTournament} 
            className="btn-primary"
            style={{ marginTop: '1rem' }}
          >
            üöÄ –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
          </button>
        </div>
      ) : tournament.isFinished ? (
        <div className="tournament-status">
          <h3>üèÜ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!</h3>
          <p>–í—Å–µ —Ç—É—Ä—ã —Å—ã–≥—Ä–∞–Ω—ã, –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</p>
          <div className="actions" style={{ marginTop: '1rem' }}>
            <button 
              onClick={() => navigate('/results')} 
              className="btn-primary"
            >
              üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            </button>
            <button 
              onClick={handleNewTournament}
              className="btn-primary"
            >
              üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
            </button>
          </div>
        </div>
      ) : (
        <>
          <h2>
            <span className="emoji">‚öîÔ∏è</span> –ü–∞—Ä—ã {tournament.currentRound} —Ç—É—Ä–∞
          </h2>
          
          {tournament.pairings.filter(p => p.round === tournament.currentRound).length === 0 ? (
            <div className="tournament-status">
              <p>–ü–∞—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–∞ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã</p>
              <button 
                onClick={handleGeneratePairings} 
                className="btn-primary"
                style={{ marginTop: '1rem' }}
                disabled={isLoading}
              >
                {isLoading ? 'üåÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã'}
              </button>
            </div>
          ) : (
            <>
              <PairingsTable 
                pairings={tournament.pairings} 
                players={tournament.players} 
                round={tournament.currentRound} 
              />
              
              <h2>
                <span className="emoji">üìù</span> –í–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
              </h2>
              <ResultsForm 
                pairings={tournament.pairings}
                players={tournament.players}
                round={tournament.currentRound}
                onSubmit={handleResultsSubmit} 
                isLoading={isLoading}
              />
            </>
          )}
        </>
      )}
    </div>
  );
};